# -*- coding: utf-8 -*-
from odoo import api, models, fields, _

import logging
_logger = logging.getLogger(__name__)


class FuelTank(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lmm.fuel_tank'
    _description = 'Vehicle Fuel Tanks'

    def _display_available_sensors(self):
        available_sensors = self.env['lmm.fuel_sensor'].search([('fuel_tank_id', '=', False)])
        return [('id', 'in', available_sensors.ids)]

    name = fields.Char(
        required=True,
        string=_("Fuel Tank Id"),
        default="Autogenerated on Save",
        copy=False
    )

    type = fields.Selection([
        ('cylindrical', _('cylindrical')),
        ('rectangular', _('rectangular')),
        ('amorphous', _('amorphous'))
    ])

    length = fields.Float(
        digits=(16, 2),
        string=_('Length')
    )

    diameter = fields.Float(
        digits=(16, 2),
        string=_('Diameter')
    )

    gasket = fields.Float(
        digits=(16, 2),
        string=_('Gasket')
    )

    volume = fields.Float(
        digits=(16, 2),
        string=_('Volume')
    )    

    position = fields.Integer(
        string=_('Position'),
        default=0
    )

    vehicle_id = fields.Many2one(
        comodel_name="lmm.vehicle",
        string=_("Related Vehicle"),
        index=True,
        tracking=True,
        required=True
    )

    fuel_sensor_id = fields.Many2one(
        comodel_name="lmm.fuel_sensor",
        string=_("Fuel Sensor Installed"),
        domain=lambda self: self._display_available_sensors(),
        index=True,
        tracking=True
    )

    @api.model
    def create(self, vals):
        seq = self.env['ir.sequence'].next_by_code('lmm.fuel_tank') or _('New')
        vals['name'] = seq
        return super(FuelTank, self).create(vals)
    
    def copy(self, default=None):
        default = dict(default or {})

        copied_count = self.search_count(
            [('name', '=like', u"Copy of {}%".format(self.name))])
        if not copied_count:
            new_name = u"Copy of {}".format(self.name)
        else:
            new_name = u"Copy of {} ({})".format(self.name, copied_count)

        default['name'] = new_name
        return super(FuelTank, self).copy(default)

    _sql_constraints = [
        ('name_unique',
         'UNIQUE(name)',
         "The fuel tank name must be unique"),
    ]
