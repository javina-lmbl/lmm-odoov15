# -*- coding: utf-8 -*-
from odoo import api, models, fields, _
from odoo.exceptions import UserError


import logging
_logger = logging.getLogger(__name__)


class Vehicle(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lmm.vehicle'
    _description = 'Vehicles Module'

    name = fields.Char(
        required=True,
        string=_("Vehicle"),
        default="Autogenerated on Save",
        copy=False
    )

    description = fields.Html(
        string=_("Vehicle Description"),
        help="Add a note about this vehicle"
    )

    active = fields.Boolean(
        string=_('Active'),
        default=True,
        tracking=True
    )

    client_id = fields.Many2one(
        comodel_name="res.partner",
        required=True,
        string=_("Owner"),
        domain=[
            ('active', '=', True),
            ('is_company', '=', True)
        ],
        index=True,
        tracking=True
    )

    registration_plate = fields.Char(
        string=_("Registration Plate"),
        tracking=True,
        help=_('License plate number of the vehicle (i = plate number for a car)')
    )

    vin_sn = fields.Char(
        string=_('Chassis Number'),
        help=_('Unique number written on the vehicle motor (VIN/SN number)'),
        copy=False
    )

    nick = fields.Char(
        string=_("Nick"),
    )

    operative_status = fields.Selection(
        [
            ('active', _('Active')),
            ('inactive', _('Inactive')),
            ('in_repair', _('In Repair')),
            ('out_of_service', _('Out of Service')),
            ('sinister', _('Sinister')),
        ],
        string=_("Operative Status"),
        tracking=True,
    )

    vehicle_type_id = fields.Many2one(
        comodel_name="lmm.vehicle_type_list",
        string=_("Vehicle Type"),
        ondelete='restrict',
        required=True,
        tracking=True
    )

    brand = fields.Char(
        string=_('Brand'),
    )

    vehicle_model = fields.Char(
        string=_('Model'),
    )

    year = fields.Integer(
        string=_('Year'),
    )

    vehicle_color = fields.Char(
        string=_('Color'),
    )

    device_ids = fields.One2many(
        comodel_name="lmm.device",
        inverse_name="vehicle_id",
        string=_("GPS Devices"),
    )

    accessory_ids = fields.One2many(
        comodel_name="lmm.accessory",
        inverse_name="vehicle_id",
        string=_("Accessories"),
    )

    fuel_tank_ids = fields.One2many(
        comodel_name="lmm.fuel_tank",
        inverse_name="vehicle_id",
        string=_("Fuel Tanks"),
    )

    fuel_tank_count = fields.Integer(
        string=_("Fuel Tanks Count"),
        compute='_compute_fuel_tanks_count',
    )

    devices_count = fields.Integer(
        string=_("Devices Count"),
        compute='_compute_devices_count',
    )

    accessories_count = fields.Integer(
        string=_("Accessories Count"),
        compute='_compute_accessories_count',
    )

    def _compute_fuel_tanks_count(self):
        for rec in self:
            rec.fuel_tank_count = self.env['lmm.fuel_tank'].search_count(
                [('vehicle_id', '=', rec.id)]
            )

    def _compute_devices_count(self):
        for rec in self:
            rec.devices_count = self.env['lmm.device'].search_count(
                [('vehicle_id', '=', rec.id)]
            )

    def _compute_accessories_count(self):
        for rec in self:
            rec.accessories_count = self.env['lmm.accessory'].search_count(
                [('vehicle_id', '=', rec.id)]
            )

    def action_view_devices(self):
        action = self.env['ir.actions.act_window']._for_xml_id('lmm.lmm_device_list_action')
        action['context'] = {'active_test': False}
        action['context'] = {'dealer_id': self.client_id, 'vehicle_id': self.id}
        action['domain'] = [('vehicle_id.id', '=', self.id)]
        return action

    def action_view_tanks(self):
        action = self.env['ir.actions.act_window']._for_xml_id('lmm.lmm_fuel_tank_list_action')
        action['context'] = {'active_test': False}
        action['context'] = {'dealer_id': self.client_id, 'vehicle_id': self.id}
        action['domain'] = [('vehicle_id.id', '=', self.id)]
        return action

    def action_view_accessories(self):
        action = self.env['ir.actions.act_window']._for_xml_id('lmm.lmm_accessory_list_action')
        action['context'] = {'active_test': False}
        action['context'] = {'dealer_id': self.client_id, 'vehicle_id': self.id}
        action['domain'] = [('vehicle_id.id', '=', self.id)]
        return action

    @api.model
    def create(self, vals):
        seq = self.env['ir.sequence'].next_by_code('lmm.vehicle') or _('New')
        vals['name'] = seq
        return super(Vehicle, self).create(vals)

    def copy(self, default=None):
        default = dict(default or {})

        copied_count = self.search_count(
            [('name', '=like', u"Copy of {}%".format(self.name))])
        if not copied_count:
            new_name = u"Copy of {}".format(self.name)
        else:
            new_name = u"Copy of {} ({})".format(self.name, copied_count)

        default['name'] = new_name
        return super(Vehicle, self).copy(default)

    _sql_constraints = [
        ('name_unique',
         'UNIQUE(name)',
         "The vehicle name must be unique"),
    ]