# -*- coding: utf-8 -*-
from odoo import api, models, fields, _


class FuelSensor(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lmm.fuel_sensor'
    _description = 'Fuel Sensor'

    name = fields.Char(
        required=True,
        string=_("Fuel Tank Id"),
        default="Autogenerated on Save",
    )

    state = fields.Selection([
        ("drop", _("Drop")),
        ("demo", _("Demo")),
        ("uninstalled", _("Uninstalled")),
        ("installed", _("Installed")),
        ("inventory", _("Inventory")),
        ("for installing", _("For Installing")),
        ("tests", _("Tests")),
        ("rma", _("RMA")),
    ])

    size = fields.Float(
        digits=(16, 2),
        string=_('Size')
    )

    client_id = fields.Many2one(
        comodel_name="res.partner",
        required=True,
        string=_("Owner"),
        domain=[
            ('active', '=', True),
            ('is_company', '=', True)
        ],
        index=True,
        tracking=True
    )

    serial_number_id = fields.Many2one(
        comodel_name="stock.production.lot",
        required=True,
        string=_("Serial Number"),
        index=True,
    )

    product_id = fields.Many2one(
        comodel_name="product.product",
        required=True,
        string=_("Product Type"),
        index=True,
        domain=[
            ('default_code', '=like', 'CFEL%')
        ]
    )

    fuel_tank_id = fields.One2many(
        comodel_name="lmm.fuel_tank",
        inverse_name="fuel_sensor_id",
        string=_("Fuel Tank"),
    )

    @api.model
    def create(self, vals):
        seq = self.env['ir.sequence'].next_by_code('lmm.fuel_sensor') or _('New')
        vals['name'] = seq
        return super(FuelSensor, self).create(vals)

    def copy(self, default=None):
        default = dict(default or {})

        copied_count = self.search_count(
            [('name', '=like', u"Copy of {}%".format(self.name))])
        if not copied_count:
            new_name = u"Copy of {}".format(self.name)
        else:
            new_name = u"Copy of {} ({})".format(self.name, copied_count)

        default['name'] = new_name
        return super(FuelSensor, self).copy(default)

    _sql_constraints = [
        ('name_unique',
         'UNIQUE(name)',
         "The fuel sensor name must be unique"),
    ]
